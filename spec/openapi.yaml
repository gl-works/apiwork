openapi: 3.0.1
info:
  description: "欢迎使用AiSpekt SDK。"
  version: "1.0.0"
  title: "AiSpekt SDK"
servers:
  - url: 'https://api.example.com'
tags:
  - name: "scanner"
    description: "传感器操作"
  - name: "profile"
    description: "传感器Profile"
  - name: "system"
    description: "系统参数/系统控制"
externalDocs:
  description: "Find out more about AiSpekt"
  url: "https://aisenz.com"
paths:
  /system/{controlActions}:
    parameters:
      - name: "controlActions"
        in: "path"
        schema: {type: "string", enum: ["reboot", "shutdown"], required: true}
    post:
      tags: ["system"]
      summary: 执行系统控制
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                {type: object, description: OK }
  /system/config:
    post:
      tags: ["system"]
      summary: "设置系统参数"
      description: "包括：密码设置，appkey设置，选择Profile，网络设置，等"
      requestBody: {$ref: '#/components/requestBodies/ConfigBody'}
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                oneOf:
                  - {type: object, description: OK }
                  - {type: object, properties: {errcode: {type: string, enum: ["ProfileNotFound"]}}}
    get:
      tags: [system]
      summary: "获取系统设置"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema: {type: object, description: OK }
  /system/status:
    get:
      tags: [system]
      summary: "获取系统状态"
      description: "OS和传感器状态信息"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema: {type: object, description: OK }
  /scanner/profile:
    post:
      tags: ["profile"]
      summary: "创建一个新的Profile"
      description: "需要为Profile指定唯一名称"
      requestBody: {$ref: '#/components/requestBodies/ProfileBody'}
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - {type: object, properties: {result: {$ref: '#/components/schemas/ScannerProfile'}}}
                  - {type: object, properties: {errcode: {type: string, enum: ["ProfileExists"]}}}
    get:
      tags: ["profile"]
      summary: "获取Profile列表"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items: {type: string}
  /scanner/profile/{profileName}:
    parameters:
      - name: "profileName"
        in: "path"
        description: "Profile名称"
        required: true
        schema: {type: "string"}
    post:
      tags: ["profile"]
      summary: "更新Profile定义"
      description: "支持局部更新"
      requestBody: {$ref: '#/components/requestBodies/ProfileBody'}
      responses:
        200:
          description: "返回更新Profile结果"
          content:
            application/json:
              schema:
                oneOf:
                  - {type: object, description: OK}
                  - {type: object, properties: {errcode: {type: string, enum: ["ProfileNotFound"]}}}
                  - {$ref: '#/components/schemas/ErrProfile'}
    get:
      tags: ["profile"]
      summary: "获取Profile定义"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                oneOf:
                  - {type: object, properties: {result: {$ref: '#/components/schemas/ScannerProfile'}}}
                  - {type: object, properties: {errcode: {type: string, enum: ["ProfileNotFound"]}}}
    delete:
      tags: ["profile"]
      summary: "删除Profile"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - {type: object, description: OK}
                  - {type: object, properties: {errcode: {type: string, enum: ["ProfileNotFound"]}}}
  /scanner/capture:
    post:
      tags: ["scanner"]
      summary: "捕捉相机图像"
      description: "捕捉指定camera（left或right）的图像，以指定format（bmp/jpg）格式输出"
      parameters:
        - name: "camera"
          in: "path"
          schema: {type: "string", enum: ["left", "right"], required: true}
        - name: "format"
          in: "query"
          schema: {type: "string", enum: ["bmp", "jpg"], default: "bmp"}
      responses:
        200:
          description: "OK"
          content:
            image/*:
              schema:
                type: string
                format: binary
  /scanner/calibrate:
    post:
      tags: ["scanner"]
      summary: "更新标定"
      description: "上传标定结果数据"
      requestBody:
        description: "标定结果数据(XML)"
        content:
          application/xml:
            schema:
              type: string
      responses:
        200:
          description: OK
  /scanner/scan:
    post:
      tags: ["scanner"]
      summary: "运行扫描"
      description: "扫描结果存入FIFO (系统受容量限制自动按生成时间释放扫描结果)"
      responses:
        200:
          description: "返回结果为FIFO访问key"
          content:
            application/json:
              schema:
                oneOf:
                  - type: "object"
                    properties:
                      result:
                        type: "object"
                        properties:
                          key: {type: "string", description: 扫描结果读取key}
                  - {type: object, properties: {errcode: {type: string, enum: ["ProfileUnspecified"]}}}
  /scanner/directscan:
    post:
      tags: ["scanner"]
      summary: "直接扫描出点云"
      description: "直接出点云，结果不存入FIFO"
      responses:
        200:
          description: "返回点云结果"
          content:
            text/plain:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                oneOf:
                  - {type: object, properties: {errcode: {type: string, enum: ["ProfileUnspecified"]}}}
  /scanners/fifo:
    post:
      tags: ["scanner"]
      summary: "导出扫描结果"
      parameters:
        - name: "operation"
          in: "query"
          description: "'pop'表示从FIFO首部/尾部获取(并删除)，readkey表示根据扫描返回的key读取(不删除)"
          required: true
          schema:
            type: "string"
            enum: ["pop=front", "pop=back", "readkey={key}"]
        - name: "format"
          in: "query"
          description: "输出格式，BMP或者点云格式(pc)"
          required: true
          schema:
            type: "string"
            enum: [ "bmp", "pc" ]
      responses:
        200:
          description: "成功时根据format参数返回BMP或Text，错误时返回JSON错误信息"
          content:
            text/plain:
              schema:
                type: string
                format: binary
            image/bmp:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                oneOf:
                  - {type: object, properties: {errcode: {type: string, enum: ["EmptyResult"]}}}
components:
  responses:
    CreateProfileResponse:
      description: OK
      content:
        application/json:
          schema:
            oneOf:
              - {type: object, properties: {result: {$ref: '#/components/schemas/ScannerProfile'}}}
              - {type: object, properties: {errcode: {type: string, enum: ["ProfileExists"]}}}
              - {type: object, properties: {errcode: {type: string, enum: ["ProfileNotFound"]}}}
  requestBodies:
    ProfileBody:
      description: "Profile定义"
      content:
        application/json:
          schema: {$ref: '#/components/schemas/ScannerProfile'}
    ConfigBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              scanner:
                type: object
                properties:
                  activeProfile: {type: "string"}
                  appkey: {type: "string"}
                  passwd: {type: "string"}
              network:
                type: object
                properties:
                  static:
                    description: "静态IP配置"
                    type: object
                  dhcp:
                    description: "DHCP配置"
                    type: object
  schemas:
    ErrProfile:
      type: "object"
      properties:
        errcode:
          type: "string"
          description: "错误码，比如 'OutRange'"
        errargs:
          type: "array"
          description: "错误参数路径, 比如 ['cameras', 'left', 'exposure']"
          items: {type: string}
        errmsg:
          type: "string"
          description: "错误详情，比如 '参数超出范围'"
    ScannerProfile:
      type: "object"
      properties:
        name: {type: "string", description: "Profile名称"}
        cameras:
          type: "object"
          properties:
            left: {$ref: "#/components/schemas/CameraConfig"}
            right: {$ref: "#/components/schemas/CameraConfig"}
        project: {$ref: "#/components/schemas/ProjectConfig"}
    ProjectConfig:
      type: "object"
      properties:
        exposure_time:
          type: "integer"
          description: 投影曝光时间，单位为微秒
        period_time:
          type: "integer"
          description: 投影周期时间，单位为微秒
        trigger_mode:
          type: "string"
          description: 投影触发模式，分为内触发（internal），外正极触发（pos），外负极触发（neg）
          enum: [ "internal", "pos", "neg" ]
        light:
          type: "string"
          description: "Led亮度，格式为 '#ff6347' 或 'rgb(255, 99, 71)'"
        out_delay:
          type: "integer"
          description: 信号延迟
        repeat:
          type: "boolean"
          description: 是否重复播放
          default: false
    CameraConfig:
      type: "object"
      properties:
        exposure:
          type: "number"
          description: 相机曝光时间
        gain:
          type: "number"
          description: 相机增益
        gamma:
          type: "number"
          description: 相机伽马值
        packet_size:
          type: "integer"
          description: 相机帧包大小
        transmission_delay:
          type: "integer"
          description: 相机帧传输时延
